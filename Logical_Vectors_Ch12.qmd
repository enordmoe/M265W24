---
title: "Chapter 12: Logical Vectors"
author: "Introduction to Data Science"
format:
  revealjs:
    theme: default 
    slide-number: true
    chalkboard: 
      theme: whiteboard
      buttons: false
    preview-links: auto
    execute:
      warning: false
      echo: true
      cache: true
editor: 
  markdown: 
    wrap: 72
---

```{r}
#| label: setup
#| include: false
#| #| eval: true
library(tidyverse)
library(scales)
library(ggrepel)
library(patchwork)
library(ggthemes)
library(palmerpenguins)
load("data/chi_flights.rda")
mammals <- read_csv("data/mammals.csv")
```

## Outline

-   Definition
-   Comparisons and complications
-   Boolean operations in data science
-   Using logical in data summaries
-   Conditional (transformation) love

------------------------------------------------------------------------

## Logical Vectors: The Skinny {.smaller}

::: incremental
1.  **Logical vectors** are those that can take on only TRUE, FALSE and
    NA values.

    -   They can indicate presence or absence of a trait (some binary
        variables are logicals).

    -   They result from logical operations

2.  **Logical operations** include *comparisons* (e.g., `<`, `==`, etc.)
    and *Boolean algebra* operations such as `&` and `|`.

3.  Logical vectors underlie our use of the `filter()` function.

4.  Logical vectors are also used in **conditional operations**, such as
    creating new variables via `mutate()` based on certain conditions.

    -   Logical operations also allow for combining logical conditions
        to enable more complex filtering and creation of variables based
        on multiple characteristics.

5.  Data summaries can be produced relying on careful and sometimes
    creative use of statistical operations combined with logical
    variables, e.g. `summarize(number_seniors = sum(age >= 65)`
:::

# The Chicago Flights Data Set

## `chiflights2020`

-   All flights out of Chicago O'Hare and Midway airports in 2020

-   250,004 cases and 19 variables.

-   Same arrival and delay variables as NYC `flights` data

-   Binary R data file

    -   `chi_flights.rda` in `data` folder of `inclass265`.

## `chiflights2020` {.smaller}

```{r}
# Put this in the first R chunk in your Quarto file 
# or at the command line
# load("data/chi_flights.rda")
glimpse(chiflights2020)
```

## Logical Vectors {.smaller}

::: columns
::: {.column width="50%"}
-   Simplest vectors of all: `TRUE`, `FALSE`, or `NA`

-   Starting point in R data parsing workflow

-   Much more useful that you might expect.

-   A random logical vector:

```{r,echo=FALSE}
sample(c(TRUE, FALSE), 10, replace = TRUE)
```
:::

::: {.column width="50%"}
![](https://www.random.org/analysis/dilbert.jpg){fig-alt="Random number generator"
fig-align="center"}
:::
:::

## The Danger of Logic

![](https://imgs.xkcd.com/comics/logic_boat.png){fig-alt="Logic boat"
fig-align="center"}

## Sample logical vector

-   Generate a vector called `age` of random student ages:

```{r}
#| echo: false
age <- sample(18:23, size = 10, replace = TRUE)
age
```

-   Test each of the 10 individuals to see if they're older than 20

    -   The result is a **logical vector**

    ```{r}
    age > 20
    ```

## Logical connections {.smaller}

-   Use logical operators to combine logicals as follows.

-   Age and Major of each of the 10 students:

```{r}
#| echo: false
#| output-location: column
major <- sample(c("STEM","non-STEM"), size = 10, replace = TRUE)
data.frame(age, major)
```

## Logical combinations: Using `&`

-   Using the `&` AND operator

```{r}
#| eval: false
age > 20 & major == "STEM"
```

```{r}
#| echo: false
data.frame(age= age, major=major, Result = age>20 & major == "STEM")
```

## Logical combinations: Using `|`

-   Using the `|` OR operator

```{r}
#| eval: false
age > 20 | major == "STEM"
```

```{r}
#| echo: false
data.frame(age= age, major=major, Result = age>20 | major == "STEM")
```

## Boolean Algebra in a Nutshell

![](https://r4ds.hadley.nz/diagrams/transform.png){fig-align="center"}

## The Less Often Used exclusive OR: `xor()`

-   Using the `xor()` function

```{r}
#| eval: false
xor(age > 20, major == "STEM")
```

```{r}
#| echo: false
data.frame(age = age, major = major, Result = xor(age>20, major == "STEM"))
```

## Combining several logicals with `any()` and `all()`?

Add binary variable for study abroad participation and living on campus:

```{r}
#| echo: false
#| output-location: column
abroad <- ifelse(runif(10)>.2,"Yes","No")
oncampus <- ifelse(runif(10)>.3,"Yes","No")
data.frame(age, major, abroad, oncampus)
```

## Combining several logicals with `any()` and `all()`?

Add binary variable for study abroad participation and living on campus:

```{r}
#| echo: false
#| output-location: column
abroad <- ifelse(runif(10)>.2,"Yes","No")
oncampus <- ifelse(runif(10)>.3,"Yes","No")
data.frame(age, major, abroad, oncampus, anytrue = any(age>20, major=="STEM", abroad=="Yes", oncampus=="No"))
```

## Combining several logicals with `any()` and `all()`

Add binary variable for study abroad participation and living on campus:

```{r}
#| echo: false
#| output-location: column
abroad <- ifelse(runif(10)>.2,"Yes","No")
oncampus <- ifelse(runif(10)>.2,"Yes","No")
data.frame(age, major, abroad, oncampus, alltrue = all(age>20, major=="STEM", abroad=="Yes", oncampus=="Yes"))
```


## Warnings {background-color="teal"}

1.  The `any()` and `or()` logical combinations are **only** to be used
    in `summarize()`.

2.  The logical operators `&&` and `||` are used only in programming,
    not in typical data science applications.

## NA values

{{< video https://youtu.be/IoyvvEWHodk start="7" >}}


