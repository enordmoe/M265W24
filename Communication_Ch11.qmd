---
title: "Chapter 11: Communication"
subtitle: "Introduction to Data Science"
author: "MATH 265"
format:
  revealjs:
    chalkboard: true
    theme: [default, custom.scss]
    reveal-options:
      slideNumber: true
    html-math-method: mathjax
title-slide-attributes:
  data-background-color: "#EA6820"
from: markdown+emoji
execute:
  echo: true
  cache: true
editor: 
  markdown: 
    wrap: 72
---


```{r}
#| label: setup
#| include: false
#| #| eval: true
library(tidyverse)
library(scales)
library(ggrepel)
library(patchwork)
library(ggthemes)
library(palmerpenguins)
mammals <- read_csv("data/mammals.csv")
```

## Outline

-   Annotations
-   Scales
-   Themes
-   Layout

## Visualization

> "When communicating results to non-technical types there is nothing
> better than a clear visualization to make your point."

\~ John Tukey

## Visualization 2.0

> "Visualization is often used for evil â€” twisting insignificant data
> changes and making them look meaningful. Don't do that crap if you
> want to be my friend. Present results clearly and honestly. If
> something isn't working - those reviewing results need to know."

\~ John Tukey

## Communication: TLDR version {.smaller}

Strategies to enhance the effectiveness of your visualizations:

::: incremental
1.  Use **labeling** to add informative text that communicates the
    context and meaning of the visualizations.

2.  Use **annotations** (including text, shapes, arrows, etc) to focus
    attention, highlight patterns, and identify outliers.

3.  Use custom scales, legends and tick marks to improve readability and
    address special circumstances such as a large number of categories.

4.  Have fun with **colors**! Become a home
    [brewer](https://colorbrewer2.org/)!

5.  Use **themes** to customize or standardize the looks of your plots
    (from default to minimalist to classic).

6.  Use **layout** tools to organize multiple plot displays and
    consolidate legend information.
:::

# Exploring Mammals Data  {background-color="#ff961c"}

## A first look at the data {.smaller}

```{r}
mammals <- read_csv("data/mammals.csv")
glimpse(mammals)
```

-   96 mammal species

-   Four quantitative variables

    -   `Brain`: brain weight in grams
    -   `Body`: body weight in kilograms
    -   `Gestation:` gestation period in days
    -   `Litter`: average litter size

## Brain vs Body Weight

::: panel-tabset
## Code

Start with a simple scatterplot and smoother:

```{r}
#| eval: false
ggplot(mammals, aes(x = Body, y = Brain)) +
  geom_point() +
  geom_smooth(method = "lm", se = F)
```

## Plot

```{r}
#| echo: false
ggplot(mammals, aes(x = Body, y = Brain)) +
  geom_point() +
  geom_smooth(method = "lm", se = F)
```
:::

## Add Labels and Title

::: panel-tabset
## Code

```{r}
#| eval: false
#| code-line-numbers: "|4-10"
ggplot(mammals, aes(x = Body, y = Brain)) +
  geom_point() +
  geom_smooth(method = "lm", se = F) +
  labs(
    x = "Body Weight (kg)",
    y = "Brain Weight (g)",
    title = "Heavier mammals have more massive brains",
    subtitle = "Who are the exceptions?",
    caption = "Source: Ramsey, F.L. and Schafer, D.W. (2013)"
)
```

## Plot

```{r}
#| echo: false
#| code-line-numbers: "|4-10"
ggplot(mammals, aes(x = Body, y = Brain)) +
  geom_point() +
  geom_smooth(method = "lm", se = F) +
  labs(
    x = "Body Weight (kg)",
    y = "Brain Weight (g)",
    title = "Heavier mammals have more massive brains",
    subtitle = "Who are the exceptions?",
    caption = "Source: Ramsey, F.L. and Schafer, D.W. (2013)"
)
```
:::

## Identify the unusual points

```{r}
#| output-location: slide
#| code-line-numbers: "|1-2, 6|"
extreme_points <-mammals |> 
  filter(Body < 1000, Brain > 1000)

ggplot(mammals, aes(x = Body, y = Brain)) +
  geom_point() +
  geom_point(data = extreme_points, color = "black", fill = "red", size = 3, stroke = 1, shape = 21) +
  geom_smooth(method = "lm", se = F) +
  labs(
    x = "Body Weight (kg)",
    y = "Brain Weight (g)",
    title = "Heavier mammals have more massive brains",
    subtitle = "The larger than expected are highlighted"
)
```

## Label the points {.smaller}

-   Use `geom_label_repel()` or `geom_text_repel()` from the **ggrepel**
    package for smart positioning of the labels
-   Lots of fine tuning options

```{r}
#| output-location: slide
#| code-line-numbers: "|6-8"
extreme_points <-mammals |> 
  filter(Body < 1000, Brain > 1000)

ggplot(mammals, aes(x = Body, y = Brain)) +
  geom_point() +
  geom_point(data = extreme_points, color = "black", fill = "red", 
             size = 3, stroke = 1, shape = 21) +
  geom_label_repel(data = extreme_points, aes(label = Species)) +
  geom_smooth(method = "lm", se = F) +
  labs(
    x = "Body Weight (kg)",
    y = "Brain Weight (g)",
    title = "Heavier mammals have more massive brains",
    subtitle = "The larger than expected are highlighted"
)
```

## Pointing out the Small Brain Mammal

We use filter to identify the mammal.

```{r}
mammals |> 
  filter(Body > 1000, Brain < 1000)
```

## Pointing out the Small Brain Mammal {.smaller}

Then manually position the annotation.

```{r}
#| output-location: slide
#| code-line-numbers: "|10-15"
ggplot(mammals, aes(x = Body, y = Brain)) +
  geom_point() +
  geom_smooth(method = "lm", se = F) +
  labs(
    x = "Body Weight (kg)",
    y = "Brain Weight (g)",
    title = "Heavier mammals have more massive brains",
    subtitle = "The larger than expected are highlighted"
)+
  annotate(geom = "rect", fill = "red", alpha = 0.15, xmin = 1250, xmax = 1550, 
           ymin = 300, ymax = 800) +
  annotate(geom = "segment", x = 1850, y = 1500, xend = 1550, yend = 800, color = "red",
           lwd = 1.5, arrow = arrow(type = "closed")) +
  annotate(geom = "text", label = "Hippos can\nhardly hide!", x = 1875, y = 1500, color = "red",
           hjust = 0)
```

## Let's reconsider

-   We're missing out on most of the data because of the wide range in
    sizes

-   Two options:

    -   Transform the data
    -   Transform the scales

## Transform the data

-   Take logs and plot the logged data

```{r}
#| output-location: slide
mammals |> 
  mutate(logbody = log10(Body), logbrain = log10(Brain)) |> 
  ggplot(aes(x = logbody, y = logbrain)) +
  geom_point() +
  geom_smooth(method = "lm", se = F) 
```

## Transform the scales

-   Now we can see the linear relatinship but our audience might not
    understand the logged scale

-   Let **ggplot2** transform the scale instead

```{r}
#| output-location: slide
ggplot(mammals, aes(x = Body, y = Brain)) +
  geom_point() +
  geom_smooth(method = "lm", se = F)  +
  scale_x_log10() + 
  scale_y_log10()
```

## Maybe customize the labels in comma format?

```{r}
#| output-location: slide
#| code-line-numbers: "|3-4"
ggplot(mammals, aes(x = Body, y = Brain)) +
  geom_point() +
  scale_x_log10(labels = comma_format()) + 
  scale_y_log10(labels = comma_format()) +
  labs(x = "Body weight (kg)",
       y = "Brain weight (g)")
```

## Use `theme()` to enhance the appearance

::: columns
::: {.column width="50%"}
-   Use `theme()` to customize font sizes and general appearance.

-   Many, many options to customize

-   See R4DS and other references for details
:::

::: {.column width="50%"}
![](https://r4ds.hadley.nz/images/visualization-themes.png){fig-alt="theme() gallery"}
:::
:::

## Experiment with `theme()` options

* We `theme_bw()` and increase base font size to improve visibility on the slide.

* Default base size is 11 point

* The result is much easier to read.

```{r}
#| output-location: slide
#| code-line-numbers: "|7"
ggplot(mammals, aes(x = Body, y = Brain)) +
  geom_point() +
  scale_x_log10(labels = comma_format()) + 
  scale_y_log10(labels = comma_format()) +
  labs(x = "Body weight (kg)",
       y = "Brain weight (g)") + 
  theme_bw(base_size = 24)
```


# Question: Do heavier mammals have longer gestation periods?  {background-color="#ff961c"}

## Plot the data

* As before, we put `Body` weight on a log scale

```{r}
#| output-location: slide
ggplot(mammals, aes(x = Body, y = Gestation)) +
  geom_point() +
  scale_x_log10()
```

## Zoom in

We use `coord_cartesian()` to zoom in on the data

```{r}
#| output-location: slide
ggplot(mammals, aes(x = Body, y = Gestation)) +
  geom_point() +
  scale_x_log10()+
  coord_cartesian(xlim = c(0.01, 1000), ylim = c(0, 400))
```

## Add Tick Marks and Reduce Clutter

* If we wanted more detail on the Y-axis, we could add more tick labels but 

* Reduce some of the other "clutter" with `theme_minimal()` and turning off minor tick lines.


```{r}
#| output-location: slide
#| code-line-numbers: "|5-6"
ggplot(mammals, aes(x = Body, y = Gestation)) +
  geom_point() +
  scale_x_log10()+
  coord_cartesian(xlim = c(0.01, 1000), ylim = c(0, 400)) +
  scale_y_continuous(breaks = seq(0, 400, 50), minor_breaks = NULL) +
  theme_minimal()
```

# Layout  {background-color="#ff961c"}


## Arranging Plots

* So far we have focused on one plot at a time
    + Except for faceting

* Alternatively, we would often like to combine several plots into a single display to tell a story or make comparisons

* The **patchwork** package provides a highly flexible way to do this

# Round up the Penguins!  {background-color="#CFE4FA"}

## Create some plots and save them {.smaller}

Note that by default R assumes the first argument to `aes()` is `x` and the second is  `y`.

```{r}
p1 <- ggplot(penguins) + 
  geom_point(aes(bill_depth_mm, bill_length_mm)) + 
  labs(title = 'Plot 1')

p2 <- ggplot(penguins) + 
  geom_boxplot(aes(flipper_length_mm, body_mass_g, group = species)) + 
  labs(title = 'Plot 2')

p3 <- ggplot(penguins) + 
  geom_point(aes(bill_length_mm, flipper_length_mm, color = sex)) + 
  labs(title = 'Plot 3')

p4 <- ggplot(penguins) + 
  geom_bar(aes(body_mass_g)) + 
  facet_wrap(~island) + 
  labs(title = 'Plot 4')
```


## Now use patchwork to arrange the plots using math-like operators

* See the text and [here](https://patchwork.data-imaginist.com/index.html) for further details and limitless options.

* Legends can be combined in common `guide area()` as shown [here](https://r4ds.hadley.nz/communication#sec-themes)

```{r}
#| output-location: slide
(p1 + p2)/p3/p4
```


## Colors 

* Start with a simple plot and add color

```{r}
#| output-location: slide
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv))
```

## Brew colors

* Many interesting palettes and color schemes to try
    + Check the documentation
    + Go to [Color Brewer 2.0](https://colorbrewer2.org/)
    
* Keep visibility and accessibility in mind



```{r}
#| output-location: slide
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) +
  scale_color_brewer(palette = "Set2") +
  theme_minimal()
```

## Specifying colors manually

* I found a colorblind safe custom palette [here](https://colorbrewer2.org/#type=qualitative&scheme=Dark2&n=3)

```{r}
#| output-location: slide
#| code-line-numbers: "|1-2,6-7"
# Manually specified color palette using HTML color codes
mycolors <- c("#1b9e77", "#d95f02", "#7570b3")

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv))+
  scale_color_manual(values = mycolors) +
  theme(text = element_text(size = 24)) # increase base font size of current theme
```

## Communication: TLDR version Revisited {.smaller}

Strategies to enhance the effectiveness of your visualizations:

1.  Use **labeling** to add informative text that communicates the
    context and meaning of the visualizations.

2.  Use **annotations** (including text, shapes, arrows, etc) to focus
    attention, highlight patterns, and identify outliers.

3.  Use custom scales, legends and tick marks to improve readability and
    address special circumstances such as a large number of categories.

4.  Have fun with **colors**! Become a home
    [brewer](https://colorbrewer2.org/)!

5.  Use **themes** to customize or standardize the looks of your plots
    (from default to minimalist to classic).

6.  Use **layout** tools to organize multiple plot displays and
    consolidate legend information.

