---
title: "Chapter 14: Strings"
subtitle: "Introduction to Data Science"
author: "MATH 265"
format:
  revealjs:
    chalkboard: true
    theme: [default, custom.scss]
    reveal-options:
      slideNumber: true
    html-math-method: mathjax
title-slide-attributes:
  data-background-color: "#EA6820"
from: markdown+emoji
execute:
  echo: true
  cache: true
editor: 
  markdown: 
    wrap: 72
---


```{r}
#| label: setup
#| include: false
#| #| eval: true
library(tidyverse)
chiflights2020 <- read_csv("https://people.kzoo.edu/enordmoe/math265/data/chiflight2020.csv")
```

## Outline

-   Strings

-   Quick intro to Regular expressions

-   Practice with strings

# What is a string? {background-image="https://upload.wikimedia.org/wikipedia/en/thumb/1/1f/Spool_of_string.jpg/544px-Spool_of_string.jpg" background-size="cover"}

## No, really what is a string in data science? {background-image="figures/stringr.png" background-size="200px"}

## What are strings and why do we care about them?

::: incremental
-   Untidy data may contain problematic strings, hidden characters

-   Using data from web sources often requires locating, removing or
    replacing strings
:::

## Strings in the Wild

![](figures/activity_roster.png)

## Creating Strings in R

```{r}
string_example <- "Hello, Data Science!"
string_example
```

Strings in R are represented using **double quotes** (`" "`) or **single quotes** (`' '`), but double quotes are more commonly used.

## Combining Strings

```{r}
paste("Data", "Science")
paste("Data", "Science", sep="-")
str_c("Data", "Science", sep="_")
```

`paste()` and `str_c()` allow us to concatenate strings with different separators.

## Escaping Special Characters

Some characters have **special meanings** in strings and must be **escaped** using a backslash (`\`).

```{r}
example_text <- "This is a \"quoted\" word."
example_text
```

## Escaping Backslashes

Since `\` is also a special character, we **double it** to represent a single backslash.

```{r}
backslash_example <- "This is a single backslash: \\" 
backslash_example
```

## Detecting Strings Using **stringr** `str_()` Functions {.smaller}

```{r}
states <- c("Arizona", "California", "Florida", "Georgia", "Indiana", "Louisiana", 
"Michigan", "Minnesota", "Nevada", "New Jersey", "Texas")
```

Detect text in a vector of the states that have hosted the super bowl:

```{r}
states
```

## `str_detect()` and `str_starts()`

```{r}
str_detect(states, "ana")
str_detect(states, "ANA")
str_starts(states, "T")  # also str_ends()
```

## `str_replace()`

```{r}
str_replace(states, "ana", "X")
str_replace_all(states, "i", "X")
```

## `str_sub()` and `str_count()`

```{r}
str_sub(states, 2, 4)
str_count(states, "e")
```

and many more...

## Strings

Get to know your [Stringr
cheatsheet](https://rstudio.github.io/cheatsheets/strings.pdf)!

![](figures/cheat_string_image.png)

## [What about more challenging string problems?]{style="color: white;"} {background-color="#FE961C"}

## Regular expressions to the rescue!

![](https://imgs.xkcd.com/comics/regular_expressions.png)

## Regular Expressions

-   Regular expressions or *regexps* concisely describe patterns in
    strings

-   They are powerful but can also be cryptic and confusing

-   Using just the right *regexp* can

    -   save lots of time and effort cleaning data

    -   help to tame very messy data

-   You don't need to know everything!

-   Try the resources on Moodle


## Anchors: `^` and `$` {.smaller}

Regular expressions use **anchors** to specify positions in a string:

- **`^` (caret)** → Matches the **start** of a string.
- **`$` (dollar sign)** → Matches the **end** of a string.

Use `str_view()` below to verify regexps matches


```{r}
# Starts with M or L
str_detect(states, "^[ML]")
str_view(states, "^[ML]")
```

## Examples of Anchors

Check for states **ending** in "a":
```{r}
str_detect(states, "a$")
str_view(states, "a$")
```

## More Anchors Examples

Match states that **start and end** with the same letter:
```{r}
mywords <- c("aviation", "breadcrumb", "caloric", "database", "fried", "thirst")
str_detect(mywords, "^(.).*\\1$")
str_view(mywords, "^(.).*\\1$")
```

Anchors are useful for **precisely controlling** what part of a string should match a pattern.



## regexp: It's not just another \\-er flick!

![](https://imgs.xkcd.com/comics/backslashes.png)

::: aside
Source:https://xkcd.com/1638/
:::

## [Practice makes purrfect]{style="color: white;"} {background-image="https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Cute_grey_kitten.jpg/800px-Cute_grey_kitten.jpg"}

# Coda

## Help with regexp

-   Getting just the right regexp command to do the job can be
    challenging!
-   A very good use of AI
-   But specify your query carefully and test carefully that it does
    what you want!

## The Question

In the R tidyverse using the stringr package, how to use a regexp to
find all words that start with a capital or small "B" and end with "e"?

## The Answer {.smaller}

ChatGPT output

You can achieve this by using a regular expression with word boundaries and a character class to match either "B" or "b" at the beginning, followed by any number of word characters, and ending with "e". For example:

```r
library(stringr)

text <- "Breeze blue Banter beagle Bridge bounce"
matches <- str_extract_all(text, "\\b[Bb]\\w*e\\b")
print(matches)
```

**Explanation:**  
- **\\b**: Specifies a word boundary to ensure that we are matching entire words.  
- **[Bb]**: Matches either an uppercase "B" or a lowercase "b".  
- **\\w***: Matches zero or more word characters.  
- **e**: Matches the literal "e".  
- **\\b**: Another word boundary to ensure the match ends at the end of the word.  

This regular expression will extract all words that start with "B" or "b" and end with "e" in the given text.