---
title: "Chapter 19: Joins"
author: Introduction to Data Science
format:
  revealjs:
    theme: [default, custom.scss]
    slide-number: true
    chalkboard: 
      theme: whiteboard
      buttons: false
    preview-links: auto
    execute:
#      eval: false
      warning: false
      echo: true
      cache: true
    callouts:
      quote:
        title: Quote
        icon: quote
title-slide-attributes:
  data-background-color: "#EA6820"
editor: 
  markdown: 
    wrap: 72
---

```{r}
#| label: setup
#| include: false
#| eval: true
library(tidyverse)
chiflights2020 <- read_csv("https://people.kzoo.edu/enordmoe/math265/data/chiflight2020.csv")
```

## Missing Values Review 

::: incremental
1.  What are the risks of simply removing rows with missing values from
    a dataset?
<br><br><br>
2.  Given a dataset with missing values, what are some ways you can detect them in R?
:::

## Missing Values Review continued {.smaller}

::: incremental
3.  What functions in the tidyverse can be used to handle missing values? How do they differ?
  - `drop_na()`: Removes rows with missing values.  
  - `replace_na()`: Replaces `NA` values with a specific value (e.g., `0`, `"Unknown"`).  
  - `na_if()`: Converts a specific placeholder value (e.g., `-99`, `"Missing"`) into `NA`, making the data cleaner.  
  - `coalesce()`: Replaces `NA` values by selecting the first available non-missing value from multiple columns or values.  
  - `fill()`: Fills missing values using the previous or next values (useful for time series).  
:::

## Missing Values Review continued

::: incremental
4. Is it ever okay to *ignore* missing data? Why or why not?
:::



## Outline

-   Tables

-   Keys

-   Mutating Joins

-   Filtering Joins

## Keys {.smaller}

![](images/sec19_keys.jpg){.absolute top=200 right=100  height="150"}


-   A variable or set of variables used to connect each pair of tables
    are called **keys**

-   Examples of potential keys

    -   Academic records: Student ID
    -   Employee database: Social security number\
    -   Medical records: Date of birth AND name
    -   Roster: First and Last name
    -   Public health data: Country code

-   What are two or three tables that could be joined using these keys?

## Key Facts {.smaller}

Two main types:

-   **Primary key:** uniquely identifies an observation in its own table

-   **Compound key:** combination of two or more variables whose values
    uniquely identify each case

-   **Foreign key:** uniquely identifies an observation in another table

    -   Could be the same variable(s) OR
    -   Could have a different name in the foreign table

-   **Surrogate keys:** sometimes added when there is no primary key (an
    arbitrary case id or row number)

## Linking Student Data Tables

![](figures/linked_student_tabes_graph.png)

## Airline Flights Data

Consists of 5 tables:

-   `flights`: on-time data for all flights departing NYC area in 2013

-   `airlines`: contains airline code and name

-   `airports`: gives static information about each airport by
    3-character code

-   `planes`: gives static information about each plane by `tailnum`

-   `weather`: gives dynamic hourly weather info near each NYC airport

## Linking Airline Flights Tables

![](https://d33wubrfki0l68.cloudfront.net/245292d1ea724f6c3fd8a92063dcd7bfb9758d02/5751b/diagrams/relational-nycflights.png)

## From the Data Transformation Cheatsheet

![](images/clipboard-566530076.png){fig-align="center" width="621"}

## Mutating Joins

Use a "Mutating Join" to join one table to columns from another

-   Matching values with the rows they correspond to.

-   Each type of join retains a different combination of values from the
    tables.

## Kinds of Mutating Joins

-   Four ways to join these two tables

![](figures/tables_x_and_y.png)

## Kinds of Mutating Joins (cont'd)

![](figures/mutating_joins.png)

## Visualizing Joins

-   Consider two simple tibbles:

![](https://www.garrickadenbuie.com/project/tidyexplain/images/static/png/original-dfs.png)

-   An excellent set of
    [animations](https://www.garrickadenbuie.com/project/tidyexplain/)
    have been developed by Garrick Aden-Buie to help visualize how each
    type of join works.

## Mutating Joins: Outer Joins

-   Outer joins keeps observations that appear in at least one of the
    tables.

-   These joins add additional "virtual" observations to each table.

-   Missing variable information are filled in with NAs.

## Outer Join Examples: Left Join {.smaller}

-   A left join keeps all observations in x.\
-   Similar to using a lookup table.
-   Also known as a "natural join"
-   Code example:

```{r, eval = FALSE}
x |> left_join(y, join_by(key)) # or join_by(key1 == key2) if different names
```

![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/left-join-extra.gif)

## Outer Join Examples: Right Join {.smaller}

-   A right join keeps all observations in y.
-   Equivalent to doing a Left Join swapping x and y.
-   Code example:

```{r, eval = FALSE}
y |> right_join(y, join_by(key))
```

![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/right-join.gif)

## Outer Join Examples: Full Join

-   A full join keeps all observations in x and y.
-   Code example:\

```{r, eval = FALSE}
x |> full_join(y, join_by(key)) 
```

![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/full-join.gif)

## Mutating Joins: Inner Join {.smaller}

-   An inner join matches pairs of observations whenever their keys are
    equal.
-   Code example:\

```{r, eval = FALSE}
x |> inner_join(y, join_by(key))
```

![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/inner-join.gif)

## The Perils of Duplicate Keys

![](figures/duplicate_keys.png)

**Note**: When you join duplicated keys, you get all possible
combinations!

$\Rightarrow$ Remove duplicates with `distinct()`

## Filtering Joins

Use a "Filtering Join" to filter one table against the rows of another.

-   Very useful for determining which rows in a table do not have
    matches and identifying anomalous cases

-   *Have* a match (`semi_join()`)\

-   Do *not* have a match (`anti_join()`)

## Kinds of Filtering Joins

![](figures/filtering_joins.png)

## Kinds of Filtering Joins: Semi Join

![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/semi-join.gif)

## Kinds of Filtering Joins: Anti Join

![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/anti-join.gif)

## Visualizing Joins in Soccer Data

![](figures/soccer_players_join_image.png)

## Questions for Soccer Joins

Thought experiment: For these two tables, think about what tibble would
be produced by each of the 6 joins. Draw the tibble you expect to be
produced and answer the following?

1)  How many rows and columns?

2)  Which rows are included/excluded?

3)  Are NA values produced by join? Where?

4)  Which columns are included/excluded?

## Reflection Questions

::: incremental
1)  Compare/contrast the joins. Think of situations where you might
    prefer one over the other.

2)  The filtering join `semi_join()` is most similar to which of the
    mutating joins? Why?
:::
