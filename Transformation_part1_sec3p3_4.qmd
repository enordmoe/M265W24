---
title: "Data Transformation Part II"
subtitle: "Introduction to Data Science"
author: "Eric Nordmoe"
format:
  revealjs:
    theme: default 
    slide-number: true
    chalkboard: 
      theme: whiteboard
      buttons: false
    preview-links: auto
    execute:
      warning: false
      echo: true
      eval: false
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(nycflights13)
heroes <- read_csv(file = "data/heroes.csv", 
                   col_types = cols(
                     name = col_character(),
                     gender = col_factor(),
                     hair_color = col_factor(),
                     height = col_double(),
                     publisher = col_factor(),
                     alignment = col_factor(),
                     weight = col_double()
)
)
```

## Review from Previous Class

1.  Compare `arrange()` and `filter()`

    -   How are they similar? different?

. . .

2.  Compare `filter()` and `distinct()`

    -   How are they similar? different?

## Review: Kinds of Transformation

The **dplyr** package provides several types of functions for manipulating data frames

-   **Rows:** sorting, filtering, and identifying rows with specified characteristics

-   **Columns**: selecting, renaming and rearranging variables and creating new variables from old

-   **Groups:** processing, summarizing and subsetting groups of observations

## Get to Know the dplyr Cheat Sheet

![](Transformation_part1_sec3p1_2_files/dply_cheat_sheet.png){fig-align="center" width="640"}

::: aside
Source: <https://rstudio.github.io/cheatsheets/data-transformation.pdf>
:::

## Today: Wrangling Columns

Key **verbs** or **functions** for working with variables (columns) today:

::: incremental
-   `mutate()`: create new variables

-   `select()`: focus on subsets of variables

-   `rename()`: rename one or several variables

-   `relocate()`: reorder variable columns
:::

## `mutate()`

Adds new columns (variables) that are calculated from the existing columns (variables)

![](figures/mutate.png)

::: aside
Source: Data Transformation with `dplyr`: CHEAT SHEET
:::

## `mutate()` arguments

-   `.after =` and `.before =` used to specify where to put the new column(s)

-   `.keep =` specify which columns to retain in addition to the newly created columns

    ::: incremental
    -   `.keep = "all"` (default) retain the existing and newly created columns
    -   `.keep = "used"` only keep the columns used in the `mutate()` computations
    -   `.keep = "none"` replace the existing columns with the newly created columns
    :::

## `select()`

Selects specific columns to focus on

![](figures/select.png)

::: aside
Source: Data Transformation with `dplyr`: CHEAT SHEET
:::

## `select()` Helper Functions

For selecting specific variables or groups of variables with similar names or distinguishing strings:

::: incremental
-   `starts_with("abc")`: matches names that begin with "abc"

-   `ends_with("xyz")`: matches names that end with "xyz"

-   `contains("ijk")`: matches names that contain "ijk"

-   `num_range("x", 1:3)`: matches x1, x2 and x3.
:::

## `rename()`

Rename one or more columns

![](figures/rename.png)

::: aside
Source: Data Transformation with `dplyr`: CHEAT SHEET
:::

## `relocate()`

Changes the order of variables within a data frame.

![](figures/relocate.png)

-   Important arguments: `.before` and `.after` to specify locations

::: aside
Source: Data Transformation with `dplyr`: CHEAT SHEET
:::

## Connect Data Wrangling Commands with the Pipe

-   The `|>` operator in Tidyverse functions is called the pipe operator.

-   "Pipe" the output of the previous line to the next line

-   Pronounce the pipe `|>` as: "and then"

-   When combined with **ggplot** functions, be sure to use `+` for layers of plots.

## Review: How does a pipe work?

-   Think of code using the pipe as a sequence of actions:
    -   Find key, unlock car, start car, drive to school, park.

. . .

-   *Expressed* as a set of nested functions:

```{r}
park(drive(start_car(find("keys")), to = "campus"))
```

. . .

-   Written code using pipes is easier to read:

```{r}
find("keys") |> 
  start_car() |> 
  drive(to = "campus") |> 
  park()
```

::: aside
Source: datasciencebox.org
:::

# Try the Examples
