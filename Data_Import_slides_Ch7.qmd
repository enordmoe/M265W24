---
title: "Chapter 7: Data Import"
subtitle: "Introduction to Data Science"
author: "Eric Nordmoe"
format:
  revealjs:
    theme: default 
    slide-number: true
    chalkboard: 
      theme: whiteboard
      buttons: false
    preview-links: auto
    execute:
      warning: false
      echo: true
---

```{r}
#| label: setup
#| include: false
#| #| eval: true
library(tidyverse)
```

## Review of R Variable Types

Some R data types:

-   **logical**: `lgl`: logical contains only TRUE or FALSE values

-   **double**: `dbl`: for double-precision, or real numbers

-   **integer**: `int`

-   **character**: `chr`: character vectors, or strings

-   and others we'll focus on later like factors, times and dates

# Demo: Examples of less friendly data sets

<!-- Duke basketball data and Anna R.'s Activity Roster Data, Math Department classes -->

Demo: Import data sets

## Two Types of Data Sets

-   Tabular data: rows and columns
    -   Sometimes tidy (for next time)

. . .

-   Non-Tabular data
    -   Non-rectangular\
    -   Linked data sets
    -   Mixed data types: variables are values, lists, other objects
    -   Require careful handling

## Common data set types and corresponding `read_` functions

-   `read_csv()`
    -   for reading comma delimted files

. . .

-   `read_tsv()`
    -   for reading tab delimited files
    -   tabs between each data value

## Common data set types and corresponding `read_` functions

-   `read_delim()`
    -   flexible command for reading data with more general delimiters (e.g., `|`, `\`, etc.)
    -   delimiter specified as part of the command

. . .

-   `read_fwf()`
    -   for reading fixed-width format files
    -   requires column positions be specified but helper functions available

## Refer to Useful Arguments on the Cheat Sheet {.smaller}

-   Typically assume CSV files have variables names as first line followed by data starting on the second line

Handling exceptions:

::: columns
::: {.column width="50%"}
::: incremental
-   No header row in input:\
    `read_csv(df, col_names = FALSE)`
-   Override header variable names:\
    `read_csv(df, col_names = c("x", "y", "z"))`
:::
:::

::: {.column width="50%"}
::: incremental
-   Skip 5 lines before reading:\
    `read_csv(df, skip = 5)`
-   Read a subset (first 100 lines):\
    `read_csv(df, n_max = 100)`
-   Specify missing values:\
    `read_csv(df, na = c("-999", "."))`
:::
:::
:::

::: aside
Source: [Data Import Cheat Sheet](https://rstudio.github.io/cheatsheets/html/data-import.html)
:::

## Data Import Cheat Sheet

![](figures/data_import_cheat.png){fig-alt="import cheat sheet" fig-align="center"}

## Suggested Process for Reading Challenging Data Sets {.small}

1.  First pass using: `df <- read_csv("file.csv")`

2.  Use `problems(df)` to diagnose problems

3.  Use helper functions

    -   Use a `col_` function to guide parsing OR\
    -   Read as character vectors and use `parse_` functions

# Parsing

-   What is **parsing**?
    -   The process of analyzing a string of symbols, either in natural language, computer languages or data structures, conforming to the rules of a formal grammar
-   Many R functions for parsing vectors: `parse_number()`, `parse_datetime()`, etc.
-   More on this later

## **readr** Strategy for Parsing Files

-   Guesses variable types based on first 1,000 rows (default)

-   Tests variable types in order:

    1.  Logicals\
    2.  Numbers\
    3.  Dates and Times\
    4.  Leaves as a character if all of the above fail.

-   Performs well except when...

    -   First 1,000 rows don't tell the whole story\
    -   Lots of missing values, NAs, especially non-standard missing values

-   Use `problems()` or `guess_` functions to help diagnose what went wrong

## Troubleshooting Bad Reading {.smaller}

::: incremental
-   Try `read_csv()` on the original CSV file

-   Use `problems()` to diagnose difficulties

-   Use `col_types()` specifications to override incorrect guesses

-   Proceed iteratively column by column

-   For major problems, go extreme:

    -   Read into a character vector of lines with `read_lines()`
    -   **More extreme**: Read into one long character string using `read_file()`
:::

Note: Process is similar for other file formats

## Reading Multiple Files

-   Large analyses may require reading multiple files with similar formats

    -   Yearly files, department-specific files, etc.

-   Process

    -   Optional: Use `list.files()` to generate the set of files to import

        -   e.g., all files of the form **salesyyyy.dat**

    -   Use `id=` to specify the files to the `read.csv()` function

## Reading Web-Based Files

To import a CSV from the web, you can simply specify the `url` directly instead of a file name:

```{r}
hfidata <- 
  read_csv("https://people.kzoo.edu/enordmoe/math265/data/hfi_cc_2022.csv")

```

# Data Entry {.smaller}

-   R has quick data entry tools useful for creating small data sets and testing data import code

. . .

-   Use `tibble()` to enter data by columns

```{r}
#| eval: false
tibble(
  x = c(1, 2, 5), 
  y = c("h", "m", "g"),
  z = c(0.08, 0.83, 0.60)
)
```

. . .

-   Use `tribble()` to enter data rowwise

```{r}
#| eval: false
tribble(
  ~x, ~y, ~z,
  1, "h", 0.08,
  2, "m", 0.83,
  5, "g", 0.60
)
```

## Importing Data using the RStudio GUI

1.    `heroes.csv`

. . .

2.    `cat-lovers.csv`
